---
uti: com.xamarin.workbook
platform: MacNet45
packages: []
---

Binary Search - Linear

```csharp
int LinearBinarySearch(int[] input, int itemToSearch){
	var itemIndex = -1;
	var left = 0; 
	var right = input.Length - 1;	
	while(right >= left){		
		int mid = (left + right)/2;
		if(itemToSearch == input[mid]){			
			itemIndex = mid;
			break;
		}
		else if(itemToSearch < input[mid]){
			right = mid - 1;
		}
		else {
			left = mid + 1; 
		}		
	}			
	return itemIndex;
}

Console.WriteLine(LinearBinarySearch(new int[]{0,1,2,3,4,5,6,7,8}, 1));
Console.WriteLine(LinearBinarySearch(new int[]{0,1,2,3,4,5,6,7,8}, 8));
Console.WriteLine(LinearBinarySearch(new int[]{0,1,2,3,4,5,6,7,8}, 18));
Console.WriteLine(LinearBinarySearch(new int[]{0,1,2,3,4,5,6,7,8}, 4));
```

Binary Search - Recursive

```csharp
int RecursiveBinarySearch(int[] input, int left, int right, int itemToSearch){
	if(right < left) {
		return -1;
	}
	
	int mid = (left + right)/2;
	if(itemToSearch == input[mid]) {
		return mid;
	}
	else if(itemToSearch < input[mid]) {
		return RecursiveBinarySearch(input, left, mid - 1, itemToSearch);
	}
	else {
		return RecursiveBinarySearch(input, mid + 1, right, itemToSearch);
	}	
}

var input = new int[]{0,1,2,3,4,5,6,7,8};
Console.WriteLine(RecursiveBinarySearch(input, 0, input.Length - 1, 1));
Console.WriteLine(RecursiveBinarySearch(input, 0, input.Length - 1, 8));
Console.WriteLine(RecursiveBinarySearch(input, 0, input.Length - 1, 19));
Console.WriteLine(RecursiveBinarySearch(input, 0, input.Length - 1, 4));
```

Selection Sort

```csharp
int[] SelectionSort(int[] input){	
	for(int i = 0; i < input.Length; i++){
		var minIndex = i;
		// From the current element search till the end
		for(int j = i + 1; j < input.Length; j++){
			if(input[j] < input[minIndex]){
				minIndex = j;
			}
		}
		
		if(minIndex != i){			
			Swap(input, i, minIndex);
		}
	}
	return input;
} 

void Swap(int[] input, int from, int to){
	var temp = input[from];
	input[from] = input[to];
	input[to] = temp;
}

Console.WriteLine(String.Join(",",SelectionSort(new int[]{4,8,3,4,0,6,8,9,2,5,81,7,9,6,9,33,23,90,5})));
Console.WriteLine(String.Join(",",SelectionSort(new int[]{-5,3,67,134,88,453543,99,32,23,5})));
```

Bubble Sort

```csharp
int[] BubbleSort(int[] input){	
	var swapExists = true;
	while(swapExists){
		swapExists = false;
		int i = 0, j = 1;
		while(j < input.Length) {
			if(input[j] < input[i]){
				swapExists = true;
				Swap(input, i, j);
			}
			i++;
			j++;
		}
	}
	return input;
} 

int[] BubbleSortOptimized(int[] input){	
	var swapExists = true;
	for(int i = 0; i < input.Length; i++){
		swapExists = false;
		
		for(int j = 1; j < input.Length - i; j++){
			if(input[j] < input[j-1]){
				swapExists = true;
				Swap(input, j, j-1);
			}
		}		
		if(!swapExists){
			break;
		}
	}
	return input;
} 

void Swap(int[] input, int from, int to){
	var temp = input[from];
	input[from] = input[to];
	input[to] = temp;
}

Console.WriteLine(String.Join(",",BubbleSort(new int[]{4,8,3,4,0,6,8,9,2,5,81,7,9,6,9,33,23,90,5,1})));
Console.WriteLine(String.Join(",",BubbleSort(new int[]{-5,3,67,134,88,453543,99,32,23,5})));

Console.WriteLine(String.Join(",",BubbleSortOptimized(new int[]{4,8,3,4,0,6,8,9,2,5,81,7,9,6,9,33,23,90,5,1})));
Console.WriteLine(String.Join(",",BubbleSortOptimized(new int[]{-5,3,67,134,88,453543,99,32,23,5})));
```

Insertion Sort

```csharp
int[] InsertionSort(int[] input){	
	for(int i = 1; i < input.Length; i++){		
		var currentItem = input[i];
		var j = i -1;		
		while(j >= 0 && currentItem < input[j]){
			input[j+1] = input[j];			
			j--;
		}
		input[j+1] = currentItem;
	}
	return input;
} 

Console.WriteLine(String.Join(",",InsertionSort(new int[]{4,8,6,9,33,23,90,5,1})));
Console.WriteLine(String.Join(",",InsertionSort(new int[]{-5,3,67,134,88,453543,99,32,23,5})));
```

Merge Sort

```csharp
void MergeSort(int[] input, int left, int right){	
	
	if(left < right) {	// Important! 
		int middle = (left + right) / 2;
		MergeSort(input, left, middle);
		MergeSort(input, middle+1, right);
		
		// Merge logic
		var n1 = middle - left + 1;
		var input1 = new int[n1];
		for(int i = 0; i < n1; i++){
			input1[i] = input[left + i];
		}

		var n2 = right - middle;
		var input2 = new int[n2];
		for(int i = 0; i < n2; i++){
			input2[i] = input[middle + 1 + i];
		}

		int p1 = 0, p2 = 0;
		var index = left;
		while(p1 < n1 && p2 < n2){
			if(input1[p1] <= input2[p2]){	//Remember the equalto sign
				input[index] = input1[p1];
				p1++;
			}
			else {
				input[index] = input2[p2];
				p2++;		
			}
			index++;
		}

		while(p1 < n1){
			input[index] = input1[p1];
			p1++;		
			index++;
		}

		while(p2 < n2){
			input[index] = input2[p2];
			p2++;		
			index++;
		}
	}	
} 


var input = new int[]{4,8,6,9,33,23,90,5,1};
MergeSort(input, 0, input.Length -1);
Console.WriteLine(String.Join(",",input));

input = new int[]{-5,3,67,134,88,453543,99,32,23,5};
MergeSort(input, 0, input.Length -1);
Console.WriteLine(String.Join(",",input));
```

Heap Sort

```csharp
void Swap(int[] input, int from, int to){
	var temp = input[from];
	input[from] = input[to];
	input[to] = temp;
}

void Heapify(int[] input, int parent, int n){
	var largest = parent;
	// Left child = 2 * Parent + 1
	// Right child = 2 * Parent + 2
	var left = 2 * parent + 1; 
	var right = 2 * parent + 2;
	
	// Left larger than parent
	if(left < n && input[left] > input[largest]){
		largest = left;
	}
	
	// Right should be larger than the current largest
	if (right < n && input[right] > input[largest]){
		largest = right;
	}
	
	//If one of the child is larger, swap with parent
	if( largest != parent){
		// Console.WriteLine("Largest " + input[largest] + " Parent " + input[parent]);
		Swap(input, largest, parent);
		
		// Recursively heapify the affected sub-tree
		Heapify(input, largest, n);	
	}	
}

void HeapSort(int[] input, int n) {
	// Start from the last Parent and keep moving up.
	// Last Parent = N/2 - 1
	// Every previous parent is one element before 
	for(int i = (n-2)/2; i >=0; i--){
		Heapify(input, i, n);
	}	
	
	// Remove one element from top and move to end
	// Re-heapify the smaller input set 
	for(int i = n-1; i>=0; i--){
		Swap(input, 0, i);	
		Heapify(input, 0,i);
	}
} 
var input = new int[]{4,8,6,9,33,23,90,5,1};
HeapSort(input, input.Length);
Console.WriteLine(String.Join(",",input)); 

input = new int[]{-5,3,67,134,88,453543,99,32,23,5};
HeapSort(input, input.Length);
Console.WriteLine(String.Join(",",input));
```

Quick Sort

```csharp
void QuickSort(int[] input, int left, int right){
	//Base exit condition
	if(left < right) {
		int pivotIndex = Partition(input, left, right);
		QuickSort(input, left, pivotIndex - 1);
		QuickSort(input, pivotIndex + 1, right);
	}
	
}

int Partition(int[] input, int left, int right){
	//Pick random pivot index
	int pivotIndex = (right + left)/2;
	int pivotValue = input[pivotIndex];
	
	//Move pivot to the end of the array
	Swap(input, pivotIndex, right);
	
	//Reset pivot index to the left of the array
	pivotIndex = left;
	
	for(int i = left; i < right; i++){
		if(input[i] < pivotValue){
			Swap(input, pivotIndex, i);
			pivotIndex++;
		}
	}
	
	// Move pivot value back to the correct position
	Swap(input, pivotIndex, right);
	return pivotIndex;
}
	
void Swap(int[] input, int from, int to){
	var temp = input[from];
	input[from] = input[to];
	input[to] = temp;
}


var input = new int[]{4,8,6,9,33,23,90,5,1};
QuickSort(input, 0, input.Length - 1);
Console.WriteLine(String.Join(",",input)); 

input = new int[]{-5,3,67,134,88,453543,99,32,23,5};
QuickSort(input, 0, input.Length - 1);
Console.WriteLine(String.Join(",",input));
```

Counting Sort

```csharp
int[] CountingSort(int[] input){
	var min = 0;
	var max = 0;
	// Find min and max elements 
	foreach(var i in input) {
		if(i < min) min = i;
		else if (i > max) max = i;
	}
	// Initialize count dictionary
	int[] counts = new int[max - min + 1];
	// Populate counts by offsetting for min value
	foreach(var j in input){
		counts[j-min]++;
	}
	
	// Update to cumulative counts
	for(int i = 1; i < counts.Length; i++){
		counts[i] += counts[i-1];
	}

	var output = new int[input.Length];
	
	for(int i = 0; i < input.Length; i++){
		var index = counts[input[i]-min];
		output[index-1] = input[i];
		counts[input[i]-min]--;
	}
	return output;
}

var input = new int[]{4,8,6,9,33,23,90,5,1};
var output = CountingSort(input);
Console.WriteLine(String.Join(",",output)); 

input = new int[]{-5,-15,3,67,134,88,200,99,32,23,5};
output = CountingSort(input);
Console.WriteLine(String.Join(",",output));
```

BucketSort

```csharp
// Prerequisites 
// 1. The elements should be uniformly distributed so that the Expected runtime of insertion sort will be O(n) 
// 2. The Hash function used should ensure that elements in B[i] are less than B[j] given i < j

float[] BucketSort(float[] input, int no_buckets) {
	//Create buckets
	LinkedList<float>[] buckets = new LinkedList<float>[no_buckets];
	
	// Create empty list within buckets	
	for( int i =0; i < buckets.Length; i++) {		
		buckets[i] = new LinkedList<float>();
	}

	foreach(var element in input){
		var bucket_index = HashFunction(element, no_buckets);


		var current_bucket = buckets[bucket_index];

		var inserted = false;		
		//Find the right location for the element in the bucket		
		var current_element = current_bucket.First;
		while(current_element != null){
			//Find element greater than this
			if(current_element.Value > element){
				current_bucket.AddBefore(current_element, element);
				inserted = true;
				break;
			}
			current_element = current_element.Next;
		}
		if(!inserted){
			current_bucket.AddLast(element);
		}
	}
	
	
	var index = 0; 
	// Writing to output
	var output = new float[input.Length];
	foreach(var bucket in buckets){
		var cursor = bucket.First;
		while(cursor != null){
			output[index++] = cursor.Value;
			cursor = cursor.Next;
		}
	}
	return output;
}

// Converts  given input into one of the available buckets
int HashFunction(float element, int no_buckets){
	return (int) (no_buckets * element);
}

var input = new float[]{0.11f,0.21f,0.3f,0.5f,0.6f,0.7f,0.8f,0.99f,0.01f};
var output = BucketSort(input, 10);
Console.WriteLine(String.Join(",",output));
```

